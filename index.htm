<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Frank Trading Signal Pro</title>
  <link rel="stylesheet" href="style.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

  <!-- Библиотека лёгковесных графиков -->
  <script src="https://unpkg.com/lightweight-charts@3.8.0/dist/lightweight-charts.standalone.production.js"></script>
 <style>
    /* скрываем заголовок графика по умолчанию */
    .chart-header {
      display: none;
    }
#chart-container {
  box-sizing: border-box;  /* учитывать padding и border */
  max-width: 600px;        /* фиксированный максимум ширины */
  width: 100%;             /* адаптивность */
  overflow: hidden;        /* запрещаем выход за пределы */
  margin: 0 auto;          /* центрирование */
  padding: 10px;           /* твой текущий padding */

}

#area-canvas {
  display: block;          /* убрать зазоры вокруг канваса */
  width: 100%;             /* адаптивность */
  height: auto;            /* авто-высота для пропорций */
}


  </style>


</head>
<body>
  <div class="container">
    <aside class="sidebar">
      <div class="logo"><svg width="202" height="30" viewBox="0 0 250 37" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M247.459 18.8994C247.459 15.5084 245.676 12.9092 242.537 12.9092C239.952 12.9092 236.894 14.4053 236.894 18.8979V26.6239H234.404V11.1589H236.894V13.1035C238.426 11.2392 240.753 10.7308 242.717 10.7308C247.147 10.7308 250.041 13.479 250 18.4304C249.998 18.5561 249.989 18.8117 249.979 19.0586V26.6239H247.459V18.8994Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M223.653 10.7308C228.179 10.7308 231.853 14.3907 231.853 18.8994C231.853 23.4081 228.179 27.0695 223.653 27.0695C219.126 27.0695 215.451 23.4081 215.451 18.8994C215.451 14.3907 219.126 10.7308 223.653 10.7308ZM223.653 12.7543C226.862 12.7543 229.467 15.5084 229.467 18.8994C229.467 22.2919 226.862 25.046 223.653 25.046C220.444 25.046 217.839 22.2919 217.839 18.8994C217.839 15.5084 220.444 12.7543 223.653 12.7543Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M212.592 11.1633H210.046V26.6283H212.592V11.1633ZM211.319 5.6143C212.292 5.6143 213.081 6.40034 213.081 7.369C213.081 8.33766 212.292 9.1237 211.319 9.1237C210.347 9.1237 209.558 8.33766 209.558 7.369C209.558 6.40034 210.347 5.6143 211.319 5.6143Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M207.452 25.8042L206.904 26.095C202.968 28.2632 198.696 26.976 198.505 21.9544H198.499V13.4162H195.542V11.1808H198.499V5.6143H201.047V11.1808H205.592V13.4162H201.047V21.4752C201.047 25.3747 204.252 25.0752 205.557 23.9166L207.452 25.8042Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M181.047 12.9852C182.518 11.5884 184.51 10.7308 186.701 10.7308C191.227 10.7308 194.903 14.3907 194.903 18.8994C194.903 23.4081 191.227 27.0695 186.701 27.0695C184.51 27.0695 182.518 26.2118 181.047 24.8151V32.3248H178.5V11.1589H181.047V12.9852ZM186.701 12.7543C189.91 12.7543 192.515 15.5084 192.515 18.8994C192.515 22.2919 189.91 25.0459 186.701 25.0459C183.492 25.0459 180.887 22.2919 180.887 18.8994C180.887 15.5084 183.492 12.7543 186.701 12.7543Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M164.751 5.39529C170.72 5.39529 175.566 10.224 175.566 16.1704C175.566 22.1168 170.72 26.944 164.751 26.944C158.779 26.944 153.933 22.1168 153.933 16.1704C153.933 10.224 158.779 5.39529 164.751 5.39529ZM164.751 7.63504C169.207 7.63504 172.824 11.46 172.824 16.1704C172.824 20.8807 169.207 24.7057 164.751 24.7057C160.293 24.7057 156.676 20.8807 156.676 16.1704C156.676 11.46 160.293 7.63504 164.751 7.63504Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M152.549 25.556L151.999 25.8468C148.125 27.9814 142.951 27.1237 142.738 21.9517L142.706 20.945V14.2871H140.156V11.1152H142.811L143.106 5.71382H146.537V11.1152H150.515V14.2871H146.537V21.2256H146.549C146.531 23.9226 148.69 23.6216 149.865 22.8824L152.549 25.556Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M131.154 26.9538C126.677 26.869 123.075 23.2778 123.075 18.8363C123.075 14.3948 126.695 10.7904 131.154 10.7904C135.611 10.7904 139.231 14.3948 139.231 18.8363C139.231 19.2863 139.195 19.7261 139.123 20.1556H127.069C127.581 22.0228 129.288 23.383 131.208 23.4312C133.021 23.4283 134.527 22.9958 135.726 21.9512L138.125 24.4306C137.993 24.5723 137.855 24.7067 137.715 24.8353C136.081 26.3095 133.842 26.9567 131.154 26.9538ZM135.187 17.517C134.676 15.6498 133.006 14.2282 131.154 14.2282C129.301 14.2282 127.581 15.6498 127.069 17.517H135.187Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M111.672 17.5175L113.847 14.7956L117.508 11.0977H122.812L115.515 18.5504L123.431 26.6343H118.127L112.863 21.2577L112.018 21.9239L112.008 26.6343H108.064V5.71382H112.008V13.1636L111.672 17.5175Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M103.423 25.7543C102.216 26.4716 100.805 26.8822 99.2986 26.8822C94.8397 26.8822 91.2212 23.2778 91.2212 18.8363C91.2212 14.3948 94.8397 10.7904 99.2986 10.7904C100.798 10.7904 102.203 11.198 103.407 11.9081C103.904 12.1989 104.881 12.9513 105.478 13.9681L102.8 16.5746C102.09 15.2085 100.823 14.2896 99.2986 14.2896C97.031 14.2896 95.3618 16.3262 95.3618 18.8363C95.3618 21.3463 97.031 23.383 99.2986 23.383C100.823 23.383 102.09 22.4626 102.8 21.098L105.475 23.7001C104.877 24.7126 103.904 25.4635 103.407 25.7543H103.423Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M81.223 10.7904C85.6804 10.7904 89.3003 14.3948 89.3003 18.8363C89.3003 23.2778 85.6804 26.8822 81.223 26.8822C76.7641 26.8822 73.1442 23.2778 73.1442 18.8363C73.1442 14.3948 76.7641 10.7904 81.223 10.7904ZM81.223 14.2896C83.4891 14.2896 85.1113 16.3262 85.1113 18.8363C85.1113 21.3463 83.4891 23.383 81.223 23.383C78.9554 23.383 77.2584 21.3463 77.2584 18.8363C77.2584 16.3262 78.9554 14.2896 81.223 14.2896Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M63.2387 5.71382C67.7327 5.71382 71.3761 9.74627 71.3761 14.2229C71.3761 14.2243 71.3761 14.2258 71.3761 14.2287C71.3761 18.7053 67.7327 22.916 63.2387 22.916H59.5967V26.6343H55.107V5.71382H63.2387ZM66.9217 14.2229C66.9217 11.9992 65.2642 9.79447 63.0319 9.79447H59.5967V18.8368H63.0319C65.2642 18.8368 66.9217 16.8673 66.9217 14.2272V14.2229Z" fill="white"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.8617 1.71209C28.8916 4.28817 33.0188 9.77219 33.0188 16.1033C33.0188 22.437 28.8902 27.921 22.8603 30.4945C16.8318 27.921 12.7017 22.437 12.7017 16.1033C12.7017 9.7709 16.8318 4.28688 22.8617 1.71209Z" fill="#002CD2"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.8564 1.71737C24.9461 0.59784 27.3297 0 29.8508 0C38.614 0 45.728 7.21819 45.728 16.1099C45.728 25.0003 38.614 32.2184 29.8508 32.2184C27.3297 32.2184 24.9461 31.6219 22.8551 30.501C28.1251 27.9263 31.7355 22.4422 31.7355 16.1099C31.7355 9.77748 28.1263 4.29345 22.8564 1.71737Z" fill="#0099FA"></path>
<path fill-rule="evenodd" clip-rule="evenodd" d="M22.8729 30.4998C20.7819 31.6206 18.3971 32.2185 15.8773 32.2185H6.50692L2.28945 36.4977C1.90639 36.8864 1.32989 37.0026 0.828479 36.7921C0.327066 36.5817 0 36.0858 0 35.5345V2.07894C0 0.931006 0.917563 0 2.04893 0H15.9282C18.4314 0.00774761 20.7985 0.605608 22.8741 1.71739C17.6029 4.29218 13.9925 9.77621 13.9925 16.1086C13.9925 22.4423 17.6029 27.9263 22.8729 30.4998Z" fill="#1A4DDE"></path>
</svg></div>
      <div class="settings">
        <div class="input-group language-dropdown">
          <label id="language-label">Language</label>
          <div class="lang-select" id="custom-language-selector">
            <button class="lang-selected" onclick="toggleLangDropdown()">
              <img id="current-flag" src="https://flagcdn.com/w20/gb.png" alt="EN" class="flag-icon">
              <span id="current-lang-text">English</span>
            </button>
          </div>
        </div>
        <select id="language" onchange="changeLanguage()" style="display:none;">
          <option value="ru">Русский</option>
          <option value="en" selected>English</option>
          <option value="uz">O'zbek</option>
        </select>
        <div class="input-group">
          <label id="currency-label">Trading Pair</label>
                    <select id="currency-pair">
                        <option>GBP/USD OTC</option>
                        <option>USD/CAD OTC</option>
                        <option>EUR/GBP OTC</option>
                        <option>EUR/JPY OTC</option>
                        <option>GBP/JPY OTC</option>
                        <option>AUD/NZD OTC</option>
                        <option>USD/RUB OTC</option>
                        <option>CAD/JPY OTC</option>
                        <option>CHF/JPY OTC</option>
                        <option>EUR/CHF OTC</option>
                        <option>AUD/CAD OTC</option>
                        <option>AED/CNY OTC</option>
                        <option>EUR/USD</option>
                        <option>BTC/USD</option>
                        <option>XAU/USD</option>
                        <option>ETH/USD</option>
                        <option>USD/RUB</option>
                        <option>USD/JPY</option>
                        <option>GBP/USD</option>
                        <option>USD/CHF</option>
                        <option>AUD/USD</option>
                        <option>USD/CAD</option>
                        <option>NZD/USD</option>
                        <option>EUR/GBP</option>
                        <option>EUR/JPY</option>
                        <option>GBP/JPY</option>
                        <option>AUD/JPY</option>
                        <option>CHF/JPY</option>
                        <option>EUR/AUD</option>
                        <option>EUR/CAD</option>
                        <option>GBP/AUD</option>
                        <option>GBP/CAD</option>
                        <option>AUD/CAD</option>
                        <option>AUD/CHF</option>
                        <option>NZD/JPY</option>
                        <option>NZD/CHF</option>                        
                    </select>
        </div>
        <div class="input-group">
          <label id="timeframe-label">Timeframe</label>
                    <select id="timeframe">
                        <option>5 seconds</option>
                        <option>15 seconds</option>
                        <option>1 minute</option>
                        <option>3 minutes</option>
                        <option>5 minutes</option>
                        <option>10 minutes</option>
                    </select>
        </div>
        <div class="button-group">
          <button id="generate-btn" class="button button-green">Get signal</button>
        </div>
      </div>
    </aside>

    <main class="main-content">
      <!-- Секция с результатом сигнала -->
      <section class="signal-block chart-block">
        <div class="signal-header">
          <h2 id="signal-title">Signal</h2>
          <span id="signal-time"></span>
        </div>
        <div id="signal-result" class="signal-result">
          <div class="signal-placeholder">Click "Get signal"</div>
        </div>
      </section>

      <!-- Секция с графиком -->
      <section class="chart-block">
        <div class="chart-header">
          <h3>Live chart</h3>
        </div>
        <div id="chart-container" style="display:none; padding:10px;">
          <!-- canvas убран, вместо него div#live-chart -->
          <div id="live-chart" style="width:100%; height:200px;"></div>
        </div>
      </section>
    </main>
  </div>
   <script>
    function toggleLangDropdown() { /* … */ }
    function changeLanguage() { /* … */ }

    function smoothScrollTo(targetY, duration = 1000) {
      const startY = window.scrollY;
      const diff   = targetY - startY;
      let startTime;
      function ease(t) {
        return t < 0.5
          ? 2 * t * t
          : -1 + (4 - 2 * t) * t;
      }
      function step(ts) {
        if (!startTime) startTime = ts;
        const elapsed = ts - startTime;
        const t       = Math.min(elapsed / duration, 1);
        window.scrollTo(0, startY + diff * ease(t));
        if (t < 1) requestAnimationFrame(step);
      }
      requestAnimationFrame(step);
    }

    (function(){
      const btn         = document.getElementById('generate-btn');
      const resultEl    = document.getElementById('signal-result');
      const timeEl      = document.getElementById('signal-time');
      const chartDiv    = document.getElementById('chart-container');
      const chartHeader = document.querySelector('.chart-header');
      const pairSelect  = document.getElementById('currency-pair');

      let liveChart, candleSeries, lastBar, updateInterval;

      // Генерирует данные OHLC с учётом локального времени пользователя
      function generateOHLC(count) {
        const data = [];
        let prev = 74.7;
        const nowSec = Math.floor(Date.now() / 1000);
        const start = nowSec - (count - 1) * 60;
        for (let i = 0; i < count; i++) {
          const time = start + i * 60; // по одной минуте
          const o = prev;
          const h = o + Math.random() * 0.02;
          const l = o - Math.random() * 0.02;
          const c = l + Math.random() * (h - l);
          data.push({
            time,
            open:  +o.toFixed(4),
            high:  +h.toFixed(4),
            low:   +l.toFixed(4),
            close: +c.toFixed(4),
          });
          prev = c;
        }
        return data;
      }

      function flagsHTML(pair){
        const [L,R] = pair.split('/');
        const lc = L.slice(0,2).toLowerCase();
        const rc = R.slice(0,2).toLowerCase();
        return `
          <span class="flags">
            <img src="https://flagcdn.com/w20/${lc}.png" alt="${L}" class="flag-icon">
            <img src="https://flagcdn.com/w20/${rc}.png" alt="${R}" class="flag-icon">
          </span>`;
      }

      function updateTime(){
        const now = new Date();
        timeEl.textContent = now.toLocaleTimeString();
      }
      updateTime();
      setInterval(updateTime, 1000);

      btn.addEventListener('click', function(){
        const animationDuration = 4000;
        btn.disabled = true;
        timeEl.textContent = '';

        resultEl.innerHTML = `
          <div class="signal-analyzing">
            Analyzing<span class="dots">...</span>
            <div class="progress-bar"><div class="progress-fill"></div></div>
          </div>`;
        const fill = resultEl.querySelector('.progress-fill');
        fill.style.transition = 'width ' + animationDuration + 'ms linear';
        setTimeout(() => fill.style.width = '100%', 50);

        chartHeader.style.display = 'flex';
        chartDiv.style.display    = 'block';

        setTimeout(() => {
          smoothScrollTo(document.documentElement.scrollHeight, 1000);
        }, 500);

        if (!liveChart) {
          liveChart = LightweightCharts.createChart(
            document.getElementById('live-chart'),
            {
              layout:   { backgroundColor: 'transparent', textColor: '#fff' },
              grid:     {
                vertLines: { color: 'rgba(255,255,255,0.1)' },
                horzLines: { color: 'rgba(255,255,255,0.1)' },
              },
              rightPriceScale: { borderColor: 'rgba(255,255,255,0.2)' },
              timeScale: {
                borderColor:    'rgba(255,255,255,0.2)',
                timeVisible:    true,
                secondsVisible: false,
                // формируем подписи в локальном часовом поясе пользователя
                tickMarkFormatter: (t, type, locale) => {
                  const d = new Date(t * 1000);
                  return d.toLocaleTimeString(locale, { hour:'2-digit', minute:'2-digit' });
                },
              },
            }
          );
          candleSeries = liveChart.addCandlestickSeries({
            upColor:        '#23d18b',
            downColor:      '#e74c3c',
            borderUpColor:  '#23d18b',
            borderDownColor:'#e74c3c',
            wickUpColor:    '#23d18b',
            wickDownColor:  '#e74c3c',
          });
        }

        const ohlc = generateOHLC(50);
        candleSeries.setData(ohlc);
        lastBar = ohlc[ohlc.length - 1];

        // Увеличиваем ширину свечей
        const barSpacing = 18;
        const chartWidth = chartDiv.clientWidth;
        liveChart.timeScale().applyOptions({
          rightOffset:   Math.floor((chartWidth / barSpacing) / 2),
          barSpacing:    barSpacing,
          minBarSpacing: 2,
        });

        if (updateInterval) clearInterval(updateInterval);
        updateInterval = setInterval(() => {
          const noise    = (Math.random() - 0.5) * 0.002;
          const newPrice = +(lastBar.close + noise).toFixed(4);
          lastBar.close = newPrice;
          lastBar.high  = Math.max(lastBar.high, newPrice);
          lastBar.low   = Math.min(lastBar.low, newPrice);
          candleSeries.update(lastBar);
          liveChart.timeScale().scrollToRealTime();
        }, 100);

        setTimeout(() => {
          clearInterval(updateInterval);
          chartDiv.style.display    = 'none';
          chartHeader.style.display = 'none';

          const action = Math.random() < 0.5 ? 'BUY' : 'SELL';
          const prob   = (Math.random() * 48 + 52).toFixed(2) + '%';
          const nowStr = new Date().toLocaleTimeString();
          const pair   = pairSelect.value;
          const tf     = document.getElementById('timeframe').value;

          resultEl.innerHTML = `
            <div class="signal-details">
              <div class="signal-pair">
                ${flagsHTML(pair)}
                <span class="pair-text">${pair}</span>
              </div>
              <div class="signal-direction ${action==='BUY'?'green':'red'}">
                ${action}
              </div>
              <div class="signal-timeframe">Timeframe: ${tf}</div>
              <div class="signal-probability">Accuracy: ${prob}</div>
            </div>`;
          timeEl.textContent = nowStr;

          const secs = /minute/.test(tf)
            ? parseInt(tf,10) * 60
            : parseInt(tf,10);
          let rem = secs || 5;
          btn.textContent = `Get signal (${rem}s)`;
          const countdown = setInterval(() => {
            rem--;
            if (rem <= 0) {
              clearInterval(countdown);
              btn.textContent = 'Get signal';
              btn.disabled    = false;
            } else {
              btn.textContent = `Get signal (${rem}s)`;
            }
          }, 1000);

        }, animationDuration);
      });
    })();
  </script>

</body>
</html>
